/*
 * This file is generated by jOOQ.
 */
package com.andriyuk.backendtest.db.jooq.tables.records;


import com.andriyuk.backendtest.db.jooq.tables.Account;

import java.math.BigDecimal;
import java.math.BigInteger;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Accounts table
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record6<BigInteger, BigInteger, String, BigDecimal, String, String> {

    private static final long serialVersionUID = -300356548;

    /**
     * Setter for <code>PUBLIC.ACCOUNT.ID</code>. Account id
     */
    public void setId(BigInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.ID</code>. Account id
     */
    public BigInteger getId() {
        return (BigInteger) get(0);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.USERID</code>.
     */
    public void setUserid(BigInteger value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.USERID</code>.
     */
    public BigInteger getUserid() {
        return (BigInteger) get(1);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.NUMBER</code>. Account number
     */
    public void setNumber(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.NUMBER</code>. Account number
     */
    public String getNumber() {
        return (String) get(2);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.BALANCE</code>. Account balance
     */
    public void setBalance(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.BALANCE</code>. Account balance
     */
    public BigDecimal getBalance() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.CURRENCY</code>. Account currency
     */
    public void setCurrency(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.CURRENCY</code>. Account currency
     */
    public String getCurrency() {
        return (String) get(4);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.STATE</code>. Account state
     */
    public void setState(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.STATE</code>. Account state
     */
    public String getState() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<BigInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<BigInteger, BigInteger, String, BigDecimal, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<BigInteger, BigInteger, String, BigDecimal, String, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<BigInteger> field1() {
        return Account.ACCOUNT.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<BigInteger> field2() {
        return Account.ACCOUNT.USERID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Account.ACCOUNT.NUMBER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<BigDecimal> field4() {
        return Account.ACCOUNT.BALANCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Account.ACCOUNT.CURRENCY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Account.ACCOUNT.STATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigInteger component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigInteger component2() {
        return getUserid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getNumber();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal component4() {
        return getBalance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getCurrency();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getState();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigInteger value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigInteger value2() {
        return getUserid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getNumber();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal value4() {
        return getBalance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getCurrency();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getState();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value1(BigInteger value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value2(BigInteger value) {
        setUserid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value3(String value) {
        setNumber(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value4(BigDecimal value) {
        setBalance(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value5(String value) {
        setCurrency(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value6(String value) {
        setState(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord values(BigInteger value1, BigInteger value2, String value3, BigDecimal value4, String value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(BigInteger id, BigInteger userid, String number, BigDecimal balance, String currency, String state) {
        super(Account.ACCOUNT);

        set(0, id);
        set(1, userid);
        set(2, number);
        set(3, balance);
        set(4, currency);
        set(5, state);
    }
}
